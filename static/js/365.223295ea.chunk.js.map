{"version":3,"file":"static/js/365.223295ea.chunk.js","mappings":"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","sources":["helpers/handleClickShowPass.js","helpers/handleMouseDownPassword.js","helpers/getVisibleContacts.js","helpers/isNameInContacts.js","helpers/fetchErrorHendler.js","components/ModalOfContacts.jsx","components/Forms/EditContactForm.jsx","components/Forms/AddContactForm.jsx","components/ContactItem.jsx","components/ContactsSkeleton.jsx","components/ContactList.jsx","components/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const handleClickShowPass = (triggerState, trigger) => {\n  trigger(!triggerState);\n};\n","export const handleMouseDownPassword = event => {\n  event.preventDefault();\n};\n","export const getVisibleContacts = (filter, contacts) => {\n  const normalizeFilter = filter.toLowerCase();\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizeFilter)\n  );\n};\n","export const isNameInContacts = (data, name) => {\n  const normalizeName = name.toLowerCase();\n  return data.find(contact => contact.name.toLowerCase() === normalizeName);\n};\n","import { Notify } from 'notiflix';\n\nexport const fetchErrorHendler = error => {\n  switch (error) {\n    case 400:\n      Notify.failure('Wrong email or password');\n      break;\n    case 500:\n      Notify.failure('Something wrong, please try later');\n      break;\n    case 'FETCH_ERROR':\n      Notify.failure('Chek your connection to the internet');\n      break;\n    default:\n  }\n};\n","import PropTypes from 'prop-types';\nimport {\n  Dialog,\n  DialogContent,\n  DialogActions,\n  IconButton,\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\n\nexport const ModalOfContacts = ({ open, setOpen, children }) => {\n  return (\n    <Dialog open={open} onClose={() => setOpen(false)}>\n      <DialogActions sx={{ p: 0 }}>\n        <IconButton\n          aria-label=\"close\"\n          variant=\"contained\"\n          onClick={() => setOpen(false)}\n          sx={{\n            position: 'absolute',\n            right: 0,\n            top: 0,\n            p: 0,\n          }}\n        >\n          <Close />\n        </IconButton>\n      </DialogActions>\n      <DialogContent sx={{ maxWidth: '375px' }}>{children}</DialogContent>\n    </Dialog>\n  );\n};\n\nModalOfContacts.propTypes = {\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n};\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useForm } from 'react-hook-form';\nimport { TextField, FormControl } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { Edit } from '@mui/icons-material';\nimport { contactsOperations } from 'redux/contacts';\nimport { isNameInContacts, fetchErrorHendler } from 'helpers';\n\nconst { useGetContactsQuery, useUpdatingContactMutation } = contactsOperations;\n\nexport const EditContactForm = ({ id }) => {\n  const { data, error } = useGetContactsQuery();\n  const [updateContact, { isLoading }] = useUpdatingContactMutation();\n  const filteredData = data.filter(contact => contact.id === id);\n  const restData = data.filter(contact => contact.id !== id);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    getValues,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      name: filteredData[0].name,\n      number: filteredData[0].number,\n    },\n  });\n\n  const onSubmit = async ({ name, number }) => {\n    const result = await updateContact({ id, ...{ name, number } });\n    if (result.error) {\n      fetchErrorHendler(result.error.status);\n      return;\n    }\n    Notify.success('Contact has updated');\n  };\n\n  if (error)\n    Notify.failure(\n      'Something wrong, check your internet connection and try later'\n    );\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormControl fullWidth sx={{ gap: 1 }}>\n        <TextField\n          label=\"Name\"\n          type=\"text\"\n          variant=\"outlined\"\n          size=\"small\"\n          placeholder=\"Input name of the contact\"\n          error={!!errors?.name}\n          helperText={errors?.name ? errors?.name?.message : null}\n          {...register('name', {\n            required: 'Name is required',\n            maxLength: {\n              value: 20,\n              message: 'Only 20 symbols',\n            },\n            pattern: {\n              value:\n                /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n              message:\n                \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n            },\n            validate: {\n              isName: () => {\n                const getName = getValues('name');\n                const isName = !isNameInContacts(restData, getName);\n                return isName || 'This name allready exist in contacts list';\n              },\n            },\n          })}\n        />\n        <TextField\n          label=\"Phone\"\n          type=\"text\"\n          variant=\"outlined\"\n          size=\"small\"\n          placeholder=\"Input phone number\"\n          error={!!errors?.number}\n          helperText={errors?.number ? errors?.number?.message : null}\n          {...register('number', {\n            required: 'Number is required',\n            minLength: {\n              value: 5,\n              message: 'must be at least 5 characters',\n            },\n            maxLength: {\n              value: 13,\n              message: 'Only 13 symbols',\n            },\n            pattern: {\n              value:\n                /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n              message:\n                'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n            },\n          })}\n        />\n        <LoadingButton\n          type=\"submit\"\n          fullWidth\n          loadingPosition=\"start\"\n          variant=\"contained\"\n          loading={isLoading}\n          startIcon={<Edit />}\n        >\n          Edit contact\n        </LoadingButton>\n      </FormControl>\n    </form>\n  );\n};\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useForm } from 'react-hook-form';\n\nimport { TextField, FormControl } from '@mui/material';\nimport { PersonAdd } from '@mui/icons-material';\nimport { LoadingButton } from '@mui/lab';\n\nimport {\n  useGetContactsQuery,\n  useAddContactMutation,\n} from 'redux/contacts/contactsOperations';\nimport { isNameInContacts, fetchErrorHendler } from 'helpers';\n\nexport const AddContactForm = () => {\n  const { data, error } = useGetContactsQuery();\n  const [addContact, { isLoading }] = useAddContactMutation();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    getValues,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      name: '',\n      number: '',\n    },\n  });\n\n  const onSubmit = async ({ name, number }) => {\n    const result = await addContact({ name, number });\n    if (result.error) {\n      fetchErrorHendler(result.error.status);\n      return;\n    }\n    Notify.success('New contact has added');\n    reset();\n  };\n\n  if (error)\n    Notify.failure(\n      'Something wrong, check your internet connection and try later'\n    );\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormControl fullWidth sx={{ gap: 1 }}>\n        <TextField\n          label=\"Name\"\n          type=\"text\"\n          variant=\"outlined\"\n          size=\"small\"\n          placeholder=\"Input name of the contact\"\n          error={!!errors?.name}\n          helperText={errors?.name ? errors?.name?.message : null}\n          {...register('name', {\n            required: 'Name is required',\n            maxLength: {\n              value: 20,\n              message: 'Only 20 symbols',\n            },\n            pattern: {\n              value:\n                /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n              message:\n                \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n            },\n            validate: {\n              isName: () => {\n                const getName = getValues('name');\n                const isName = !isNameInContacts(data, getName);\n                return isName || 'This name allready exist in contacts list';\n              },\n            },\n          })}\n        />\n        <TextField\n          label=\"Phone\"\n          type=\"text\"\n          variant=\"outlined\"\n          size=\"small\"\n          placeholder=\"Input phone number\"\n          error={!!errors?.number}\n          helperText={errors?.number ? errors?.number?.message : null}\n          {...register('number', {\n            required: 'Number is required',\n            minLength: {\n              value: 5,\n              message: 'must be at least 5 characters',\n            },\n            maxLength: {\n              value: 13,\n              message: 'Only 13 symbols',\n            },\n            pattern: {\n              value:\n                /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n              message:\n                'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n            },\n          })}\n        />\n        <LoadingButton\n          type=\"submit\"\n          fullWidth\n          loadingPosition=\"start\"\n          variant=\"contained\"\n          loading={isLoading}\n          startIcon={<PersonAdd />}\n        >\n          Add contact\n        </LoadingButton>\n      </FormControl>\n    </form>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { Notify } from 'notiflix';\nimport { useState } from 'react';\nimport { Grid, Paper, Box, Typography, Button, Tooltip } from '@mui/material';\nimport { AccountCircle, PersonRemove, Phone, Edit } from '@mui/icons-material';\nimport { LoadingButton } from '@mui/lab';\nimport { useDeleteContactMutation } from 'redux/contacts/contactsOperations';\nimport { ModalOfContacts } from 'components/ModalOfContacts';\nimport { EditContactForm } from 'components/Forms';\nimport { fetchErrorHendler } from 'helpers';\n\nconst ContactItem = ({ id, name, number }) => {\n  const [deleteContact, { isLoading }] = useDeleteContactMutation();\n  const [elevation, setElevation] = useState(3);\n  const [open, setOpen] = useState(false);\n\n  const handleClick = async id => {\n    const result = await deleteContact(id);\n    if (result.error) {\n      fetchErrorHendler(result.error.status);\n      return;\n    }\n    Notify.success('Contacts has deleted');\n  };\n\n  return (\n    <>\n      <Grid item xs={12} sm={4} md={3}>\n        <Paper\n          elevation={elevation}\n          onMouseEnter={() => setElevation(8)}\n          onMouseLeave={() => setElevation(3)}\n        >\n          <Box sx={{ p: 1 }}>\n            <Typography sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <AccountCircle /> {name}\n            </Typography>\n            <Typography sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <Phone /> {number}\n            </Typography>\n            <Typography align=\"center\">\n              <Tooltip title=\"Edit contact\">\n                <Button\n                  aria-label=\"edit contact\"\n                  onClick={() => setOpen(true)}\n                  variant=\"contained\"\n                  sx={{ mr: '10px' }}\n                >\n                  <Edit />\n                </Button>\n              </Tooltip>\n              <Tooltip title=\"Delete contact\">\n                <LoadingButton\n                  aria-label=\"delete contact\"\n                  onClick={() => handleClick(id)}\n                  loading={isLoading}\n                  variant=\"contained\"\n                >\n                  <PersonRemove />\n                </LoadingButton>\n              </Tooltip>\n            </Typography>\n          </Box>\n        </Paper>\n      </Grid>\n      <ModalOfContacts open={open} setOpen={setOpen}>\n        <EditContactForm id={id} />\n      </ModalOfContacts>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import { Grid, Skeleton } from '@mui/material';\n\nexport const ContactsSkeleton = () => {\n  const skeletonArr = [];\n  for (let i = 0; i < 8; i++) {\n    skeletonArr.push(\n      <Grid key={i} item xs={12} sm={4} md={3}>\n        <Skeleton variant=\"rectangular\" height={50} />\n      </Grid>\n    );\n  }\n  return <>{skeletonArr}</>;\n};\n","import { Notify } from 'notiflix';\nimport { useSelector } from 'react-redux/es/exports';\nimport { contactsOperations, getFilter } from 'redux/contacts';\nimport { Grid, Typography } from '@mui/material';\nimport { getVisibleContacts } from 'helpers';\n\nimport ContactItem from 'components/ContactItem';\nimport { ContactsSkeleton } from 'components/ContactsSkeleton';\n\nconst { useGetContactsQuery } = contactsOperations;\n\nconst ContactList = () => {\n  const { data: contacts, isLoading, error } = useGetContactsQuery();\n  const filter = useSelector(getFilter);\n\n  if (error)\n    Notify.failure(\n      'Something wrong, check your internet connection and try later'\n    );\n\n  return (\n    <Grid container spacing={2} justifyContent=\"center\">\n      {isLoading ? (\n        <ContactsSkeleton />\n      ) : contacts.length > 0 ? (\n        getVisibleContacts(filter, contacts).map(({ id, name, number }) => (\n          <ContactItem key={id} id={id} name={name} number={number} />\n        ))\n      ) : (\n        <Grid item>\n          <Typography variant=\"body1\" sx={{ mx: 'auto' }}>\n            There are no contacts yet here, you could add some\n          </Typography>\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/contactsFilterSlice';\n\nimport { Box, TextField, InputAdornment } from '@mui/material';\nimport { Search } from '@mui/icons-material';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Box sx={{ mb: '10px', textAlign: 'center' }}>\n      <TextField\n        label=\"Find your contacts by name\"\n        type=\"text\"\n        variant=\"outlined\"\n        size=\"small\"\n        placeholder=\"Begin to type name\"\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Search color=\"primary\" />\n            </InputAdornment>\n          ),\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default Filter;\n","import { useState } from 'react';\n\nimport { Box, Button, Typography } from '@mui/material';\n\nimport { ModalOfContacts } from 'components/ModalOfContacts';\nimport { AddContactForm } from 'components/Forms';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nconst Contacts = () => {\n  const [open, setOpen] = useState(false);\n  return (\n    <Box>\n      <Typography\n        variant=\"h1\"\n        align=\"center\"\n        sx={{ mb: '10px', fontSize: '32px' }}\n      >\n        CONTACTS\n      </Typography>\n      <Box sx={{ maxWidth: '375px', mx: 'auto' }}>\n        <Button\n          variant=\"contained\"\n          onClick={() => setOpen(true)}\n          fullWidth\n          sx={{ mb: '10px' }}\n        >\n          Add contact\n        </Button>\n        <ModalOfContacts open={open} setOpen={setOpen}>\n          <AddContactForm />\n        </ModalOfContacts>\n      </Box>\n      <Filter />\n      <ContactList />\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["handleClickShowPass","triggerState","trigger","handleMouseDownPassword","event","preventDefault","getVisibleContacts","filter","contacts","normalizeFilter","toLowerCase","contact","name","includes","isNameInContacts","data","normalizeName","find","fetchErrorHendler","error","Notify","ModalOfContacts","open","setOpen","children","Dialog","onClose","DialogActions","sx","p","IconButton","variant","onClick","position","right","top","Close","DialogContent","maxWidth","useGetContactsQuery","contactsOperations","useUpdatingContactMutation","EditContactForm","id","updateContact","isLoading","filteredData","restData","useForm","mode","defaultValues","number","register","handleSubmit","errors","formState","getValues","onSubmit","result","status","FormControl","fullWidth","gap","TextField","label","type","size","placeholder","helperText","message","required","maxLength","value","pattern","validate","isName","getName","minLength","LoadingButton","loadingPosition","loading","startIcon","Edit","AddContactForm","useAddContactMutation","addContact","reset","PersonAdd","useDeleteContactMutation","deleteContact","useState","elevation","setElevation","handleClick","Grid","item","xs","sm","md","Paper","onMouseEnter","onMouseLeave","Box","Typography","display","alignItems","AccountCircle","Phone","align","Tooltip","title","Button","mr","PersonRemove","ContactsSkeleton","skeletonArr","i","push","Skeleton","height","useSelector","getFilter","container","spacing","justifyContent","length","map","mx","dispatch","useDispatch","mb","textAlign","onChange","e","setFilter","currentTarget","InputProps","startAdornment","InputAdornment","Search","color","fontSize"],"sourceRoot":""}